@page "/shoppinglist/{id:int}"
@using Core;
@using System.Net
@using WebApp1.Service
@inject HttpClient Http;
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject NavigationManager navigationManager
@inject IShoppingService shoppingService



<h1 class="mb-3 mt-3">Shopping List - @shoppingList.Name</h1>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Amount</th>
            <th>Price</th>
            <th>Done</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in shoppingList.ShoppingItems)
        {
            <tr>
                <td>@item.Name</td>
                <td>@item.Amount</td>
                <td>@item.Price</td>
                <td>
                    <InputCheckbox id="Done" @bind-Value="item.Done" @onclick="() =>UpdateShoppingItem(item) " class="form-check-input" />
                </td>

            </tr>
        }

    </tbody>
</table>

<h2>Add Item</h2>

<EditForm Model="@shoppingItem" class="row p-3" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="col-md-12 mb-3">
        <label for="Name">Name</label>
        <InputText id="Name" @bind-Value="shoppingItem.Name" class="form-control" />
    </div>
    <div class="col-md-6 mb-3">
        <label for="Price">Price</label>
        <InputNumber id="Price" @bind-Value="shoppingItem.Price" class="form-control" />
    </div>
    <div class="col-md-6 mb-3">
        <label for="Amount">Amount</label>
        <InputNumber id="Amount" @bind-Value="shoppingItem.Amount" class="form-control" />
    </div>

    <div class="col-md-12 mb-3">
        <label for="Description">Description</label>
        <InputTextArea id="Description" @bind-Value="shoppingItem.Description" class="form-control" />
    </div>
    <div class="col-md-6 mb-3">
        <div class="form-check">
            <InputCheckbox id="Done" @bind-Value="shoppingItem.Done" class="form-check-input" />
            <label class="form-check-label" for="Done">
                Is Done
            </label>
        </div>
    </div>

    <div class="col-12 mb-3">
        <button type="submit" class="btn btn-primary">Add</button>
    </div>
</EditForm>
<p>@errorText</p>


@code {

    // Objekt for formen der vises modal
    private ShoppingItem shoppingItem = new();

    // container for listen
    private ShoppingList shoppingList { get; set; }

    [Parameter]
    public int Id { get; set; }

    private string errorText = "";
    
    protected override async Task OnInitializedAsync()
    {
        shoppingList = await shoppingService.GetById(Id);
    }

    public async Task HandleValidSubmit()
    {
        await AddShoppingItem();
    }

    private async Task AddShoppingItem()
    {
        shoppingList.ShoppingItems.Add(shoppingItem);
        await shoppingService.UpdateShoppingItems(shoppingList);
        shoppingItem = new(); // clear fields in form
    }
    
    private async Task UpdateShoppingItem(ShoppingItem item)
    {
        item.Done = !item.Done;
        await shoppingService.UpdateShoppingItems(shoppingList);
    }
}

